#!/usr/bin/env ruby

DEFAULT_FOLDER = File.expand_path '~/Downloads'
DEFAULT_THRESHOLD = 1.0

#
# Suffixes to use when looking in @options.folder for the original video.
# All suffixes listed will be tried both all lowercase and all uppercase.
# For example, if @options.folder == "~/Downloads" and there is a video
# called myvideo.mp4 in the current directory, the following source videos
# would all match:
# ~/Downloads/myvideo.MP4
# ~/Downloads/myvideo.mov
# ~/Downloads/myvideo.MOV
# ~/Downloads/myvideo.FLV
# ~/Downloads/myvideo.wmv
#
VIDEO_SUFFIXES = %w[mp4 mov avi wmv flv vob].freeze

require 'colored'
require 'fileutils'
require 'optparse'
require 'video_converter'

################
# Option parsing
################

Options = Struct.new(
  :verbose,
  :fix,
  :folder,
  :threshold
)

@options = Options.new(
  false,
  false,
  DEFAULT_FOLDER,
  DEFAULT_THRESHOLD
)

OptionParser.new do |opts|
  prefix = 'Usage: check_sizes'
  indent = ' ' * prefix.length

  opts.banner = "#{prefix} [-h|--help]\n" \
    "#{indent}[-v|--[no-]verbose]\n" \
    "#{indent}[-F|--[no-]fix]\n" \
    "#{indent}[-f FOLDER|--folder=FOLDER]\n" \
    "#{indent}[-t THRESHOLD|--threshold=THRESHOLD]\n" \
    "#{indent}[FILE] [FILE] [...]"

  opts.on '-h', '--help', 'Prints this help' do
    puts opts
    exit
  end

  opts.on '-v', '--[no-]verbose', 'Generate extra output at times' do |v|
    @options.verbose = v
  end

  opts.on '-F', '--[no-]fix', 'Reconvert videos to fix problems (Default: Only report problems)' do |f|
    @options.fix = f
  end

  opts.on '-f FOLDER', '--folder=FOLDER', "Folder (String: default #{DEFAULT_FOLDER})" do |f|
    @options.folder = f
  end

  opts.on '-t THRESHOLD', '--threshold=THRESHOLD', Float, "Threshold (Float: default #{DEFAULT_THRESHOLD})" do |t|
    if t <= 0 || t > 1
      puts 'Threshold must be greater than 0 and at most 1.'
      exit
    end
    @options.threshold = t
  end
end.parse!

def verbose?
  @options.verbose
end

def fix?
  @options.fix
end

############
# formatting
############

def formatted_size(size)
  if size < 1024
    "#{size} B"
  elsif size < 1024 * 1024
    "#{format('%.2f', (size / 1024.0 + 0.005))} kB"
  elsif size < 1024 * 1024 * 1024
    "#{format('%.2f', (size / 1024.0 / 1024.0 + 0.005))} MB"
  else
    "#{format('%.2f', (size / 1024.0 / 1024.0 / 1024.0 + 0.005))} GB"
  end
end

##############
# main program
##############

include VideoConverter::MP4Info, VideoConverter::Util

def all_videos
  return @all_videos unless @all_videos.nil?
  return @all_videos = ARGV unless ARGV.empty?

  @all_videos = Dir['*.mp4'].sort { |f1, f2| File.mtime(f1) <=> File.mtime(f2) }
end

def base_path(path)
  File.basename(path).sub(/#{VIDEO_SUFFIXES.join "$|"}/i, 'mp4')
end

def check_and_report(old_path)
  path = base_path old_path
  new_size = File.size path
  old_size = File.size old_path

  if new_size >= old_size * @options.threshold
    log "#{path}: #{new_size} (compressed)/#{old_size} (original) #{format('%.2f', (new_size * 100.0 / old_size + 0.005))}%".yellow
  else
    log "#{path}: #{new_size} (compressed)/#{old_size} (original) #{format('%.2f', (new_size * 100.0 / old_size + 0.005))}%".green
  end

  if old_path.is_mp4?
    log "  audio bitrate: orig #{formatted_audio_bitrate old_path}, converted #{formatted_audio_bitrate path}"
    log "  video bitrate: orig #{formatted_video_bitrate old_path}, converted #{formatted_video_bitrate path}"
  else
    log "  audio bitrate: converted #{formatted_audio_bitrate path}"
    log "  video bitrate: converted #{formatted_video_bitrate path}"
  end

  [old_size, new_size]
end

def original_video(path)
  VIDEO_SUFFIXES.each do |suffix|
    old_path = File.join(@options.folder, path.sub(/mp4$/, suffix))
    return old_path if File.exist? old_path

    old_path = File.join(@options.folder, path.sub(/mp4$/, suffix.upcase))
    return old_path if File.exist? old_path
  end

  nil
end

exit(1) unless check_required_commands(:mp4info)

total_savings = 0
total_size = 0
all_videos.each do |path|
  old_path = original_video path

  if old_path.nil?
    log "original video not found for #{path} in #{@options.folder}".yellow if verbose?
    next
  end

  old_size, new_size = check_and_report old_path

  if old_path.is_mp4? && audio_bitrate(path) > audio_bitrate(old_path)
    log "  Conversion increased audio bitrate from #{formatted_audio_bitrate old_path} to #{formatted_audio_bitrate path}.".yellow
  end

  if old_path.is_mp4? && video_bitrate(path) > video_bitrate(old_path)
    log "  Conversion increased video bitrate from #{formatted_video_bitrate old_path} to #{formatted_video_bitrate path}.".yellow
  end

  if fix? && new_size >= old_size * @options.threshold && old_path.is_mp4?
    FileUtils.rm_f path
    FileUtils.cp old_path, path
    FileUtils.touch path, mtime: File.mtime(old_path)
    log "Copied #{old_path} to #{path}."
    new_size = old_size
  end

  total_savings += old_size - new_size
  total_size += old_size
end

unless total_size <= 0
  log "Total savings: #{formatted_size total_savings}/#{formatted_size total_size} (#{format('%.2f', (total_savings * 100.0 / total_size + 0.005))}%)"
end
